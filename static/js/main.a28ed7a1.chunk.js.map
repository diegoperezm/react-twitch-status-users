{"version":3,"sources":["components/Menu/index.js","components/UsersTable/OnlineUsers.js","components/UsersTable/OfflineUsers.js","components/UsersTable/index.js","App.js","serviceWorker.js","index.js","utils/index.js"],"names":["Menu","isLoading","className","Nav","variant","Item","exact","to","activeStyle","color","backgroundColor","OnlineUsers","list","status","userInfo","formatUsersData","filter","elem","map","el","key","uuidv4","name","alt","src","logo","onError","e","undefined","PLACEHOLDER","target","game","OfflineUsers","AllUsersTable","Table","hover","responsive","OnlineUsersTable","OfflineUsersTable","App","useState","setLoading","result","setResult","stream","setStream","useEffect","fetchUsers","a","users","USER_URL_ARR","url","fetch","then","res","json","Promise","all","val","fetchStream","usersStream","STREAM_URL_ARR","Container","Row","Col","xs","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","USERS","PATH_BASE","ele","exports","idUsersOnline","channel","_id","usersOffline","includes","Object","assign","display_name","id","concat"],"mappings":"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","file":"static/js/main.a28ed7a1.chunk.js","sourcesContent":["import   React     from 'react';\nimport   Nav       from 'react-bootstrap/Nav';\nimport { NavLink } from 'react-router-dom';\n\n\n\nconst Menu =  ( { isLoading } ) => ( isLoading )\n  ? <div>\n     <div className=\"message\">\n       <h1>Loading&nbsp;...</h1>\n     </div>\n    </div>\n\n  : <Nav\n      variant=\"pills\"\n      className=\"mt-2 mb-2\"\n    >\n    <Nav.Item>\n      <NavLink\n       className=\"links\"\n        exact\n        to=\"/\"\n        activeStyle={{\n            color: '#fff',\n            backgroundColor: '#007bff',\n        }}\n      >All</NavLink>\n    </Nav.Item>\n    <Nav.Item>\n      <NavLink\n       className=\"links\"\n        exact\n        to=\"/online\"\n        activeStyle={{\n            color: '#fff',\n            backgroundColor: '#007bff',\n        }}\n      >Online</NavLink>\n    </Nav.Item>\n    <Nav.Item>\n      <NavLink\n       className=\"links\"\n        exact\n        to=\"/offline\"\n        activeStyle={{\n            color: '#fff',\n            backgroundColor: '#007bff',\n        }}\n       >Offline</NavLink>\n    </Nav.Item>\n   </Nav>;\n\n\nexport default Menu;\n","import React from 'react';\nimport { formatUsersData } from '../../utils';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PLACEHOLDER }  from '../../utils';\n\nfunction OnlineUsers ( { list, status} ) {\n const userDataAndStatusArr =  formatUsersData(list, status);\n let userInfo = userDataAndStatusArr.filter(elem => elem.status === 'online').map( el =>\n    <tr\n      key={ uuidv4()}\n      className={`table__tr  table__tr--${ el.status }`}\n    >\n      <td\n        key={ uuidv4()}\n        className=\"table__td\" >\n        <img\n          key={ `${ el.name }-img` }\n          alt=\"\"\n          src={ el.logo }\n          onError={(e)=>{ if(PLACEHOLDER !== undefined) e.target.src=PLACEHOLDER;}}\n          className=\"table__td__img\"\n        />\n      </td>\n      <td\n        key={ uuidv4()}\n        className=\"table__td\"\n      >\n        { el.name }\n      </td>\n      <td\n        key={ uuidv4()}\n        className=\"table__td\"\n      >\n        { el.status }\n      </td>\n      <td\n        key={ uuidv4()}\n        className=\"table__td\"\n      >\n        { el.game }\n      </td>\n   </tr>);\n\n    return (<>{userInfo}</> );\n\n };\n\n\nexport default OnlineUsers;\n","import React from 'react';\nimport { formatUsersData } from '../../utils';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PLACEHOLDER }  from '../../utils';\n\nfunction OfflineUsers ( {  list, status} ) {\n const userDataAndStatusArr =  formatUsersData(list, status);\n let userInfo = userDataAndStatusArr.filter(elem => elem.status === 'offline').map( el =>\n    <tr\n      key={ uuidv4()}\n      className={`table__tr  table__tr--${ el.status }`}\n    >\n      <td\n        key={ uuidv4()}\n        className=\"table__td\" >\n        <img\n          key={ uuidv4()}\n          alt=\"\"\n          src={ el.logo }\n          onError={(e)=>{ if(PLACEHOLDER !== undefined ) e.target.src=PLACEHOLDER;}}\n          className=\"table__td__img\"\n        />\n      </td>\n      <td\n        key={ uuidv4()}\n        className=\"table__td\"\n      >\n        { el.name }\n      </td>\n      <td\n        key={ uuidv4()}\n        className=\"table__td\"\n      >\n        { el.status }\n      </td>\n      <td\n        key={ uuidv4()}\n        className=\"table__td\"\n      >\n        { el.game }\n      </td>\n   </tr>);\n\n    return(<>{userInfo }</>);\n };\n\n\nexport default OfflineUsers;\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport OnlineUsers from './OnlineUsers';\nimport OfflineUsers from './OfflineUsers';\n\nconst AllUsersTable = ( { isLoading, list, status  } ) =>\n  ( !isLoading )\n  ? <Table hover responsive>\n     <tbody>\n      <tr className=\"table__th\">\n        <th>Logo</th>\n        <th>Name</th>\n        <th>Status</th>\n        <th>Game</th>\n      </tr>\n      <OnlineUsers\n         list={list}\n         status={status}\n      /> \n      <OfflineUsers\n        list={list}\n       status={status}\n      />\n     </tbody>\n    </Table>\n  : null;\n\nconst OnlineUsersTable = ( { isLoading, list, status  } ) =>\n  ( !isLoading )\n  ? <Table hover responsive>\n     <tbody>\n      <tr className=\"table__th\">\n        <th>Logo</th>\n        <th>Name</th>\n        <th>Status</th>\n        <th>Game</th>\n      </tr>\n      <OnlineUsers\n         list={list}\n         status={status}\n      /> \n    </tbody>\n    </Table>\n  : null;\n\nconst OfflineUsersTable = ( { isLoading, list, status  } ) =>\n  ( !isLoading )\n  ? <Table hover responsive>\n     <tbody>\n      <tr className=\"table__th\">\n        <th>Logo</th>\n        <th>Name</th>\n        <th>Status</th>\n        <th>Game</th>\n      </tr>\n     <OfflineUsers\n        list={list}\n        status={status}\n      />\n     </tbody>\n    </Table>\n  : null;\n\nexport { AllUsersTable, OnlineUsersTable, OfflineUsersTable };\n\n\n","import React                                     from 'react';\nimport { useState, useEffect }                   from 'react';\nimport {HashRouter, Switch, Route,} from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport Menu from './components/Menu';\nimport  {\n AllUsersTable,\n OnlineUsersTable,\n OfflineUsersTable\n}  from './components/UsersTable/';\n\nimport { USER_URL_ARR, STREAM_URL_ARR }  from './utils/';\n\nfunction App() {\n  const [isLoading, setLoading]  = useState(true);\n  const [result,    setResult]   = useState([]);\n  const [stream,    setStream]   = useState([]);\n\n\n  useEffect( () => {\n  /*\n  Not sure about this one, maybe is better to use only Promise.all\n  (without the  fetch* async functions)\n  */\n\n  const fetchUsers = async ()  => {\n     let users = USER_URL_ARR.map(\n     url => fetch( url )\n     .then( res => res.json() )\n     .then( json => json ));\n\n     Promise.all(users).then(val => setResult(val));\n\n  };\n\n  const fetchStream = async() => {\n     let usersStream =  STREAM_URL_ARR.map(\n         url => fetch( url )\n         .then( res => res.json())\n         .then( json => json));\n\n         Promise.all(usersStream).then(val => setStream(val));\n      };\n\n      fetchUsers();\n      fetchStream();\n      setLoading(false);\n  },[]);\n\n return (\n <HashRouter>\n  <Container  >\n    <Row>\n      <Col xs={12}>\n       <Menu isLoading={ isLoading  } />\n      <Switch>\n         <Route exact path=\"/\">\n           <AllUsersTable \n            isLoading={ isLoading }\n            list={result}\n            status={stream} />\n          </Route>\n         <Route exact path=\"/online\">\n           <OnlineUsersTable \n            isLoading={ isLoading }\n            list={result}\n            status={stream} />\n          </Route>\n          <Route exact path=\"/offline\">\n           <OfflineUsersTable \n            isLoading={ isLoading }\n            list={result}\n            status={stream} />\n          </Route>\n        </Switch>\n         </Col>\n    </Row>\n  </Container>\n </HashRouter>\n );\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"," const USERS = [\n  \"ESL_SC2\",\n  \"OgamingSC2\",\n  \"cretetion\",\n  \"freecodecamp\",\n  \"storbeck\",\n  \"habathcx\",\n  \"RobotCaleb\",\n  \"noobs2ninjas\"];\n\n const PATH_BASE  = 'https://wind-bow.glitch.me/twitch-api';\n const PARAM_USER = '/users/';\n const PARAM_STREAM =  '/streams/';\n\n const USER_URL_ARR = USERS.map(ele => `${PATH_BASE}${PARAM_USER}${ele}`);\n const STREAM_URL_ARR = USERS.map(ele => `${PATH_BASE}${PARAM_STREAM}${ele}`);\n\n const PLACEHOLDER = \"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAASwAAAEsBAMAAACLU5NGAAAAG1BMVEXMzMyWlpa3t7eqqqqcnJyj o6PFxcWxsbG+vr6NAD6nAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACjklEQVR4nO3XO2/bMBDA8fNT Gn2OlGS00S8QAWnnaKi7xnBQdJSBFl3joY/RRpHv3SNFykYtdKOm/w8BHOkOIM3HkRYBAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/uddvWvsI38sj+7xT/2lJ2n8WH64iMbkdCaqurTPteqd a98eX6+zKnu9OkdDckIH3W21kbmWlR5F9rrT+6ukTMv3ettFY3JC9UZyfZBJ0czrZxuWjXwtr5Km RSOnmy4ak9PJ3bc+PMveJvJ0a+OwslfNv1knG6Ks7KIhOaGxulYXsl7YmNy1j/XV4nLRXLtoSE4o czN2epLK5mRSuj/x/7tuPImfOfHDKXnRRUNyaq6l17bhu7aX/q1N1fY8Va7TIRqSE/tuS2a78i3N ludu7QsbsW4+54dlFw3JadVqM1Uf3b6XqSsO+4V/n+nrtGt7qrZdYzQkp6WuFLUtNW3DYebqzXoZ k0ZqWzZGQ3LqblmLvhFtRq5Ho9Ct9c25OI1c52M0JKftlrzpc+9ozfSilOfbctjRsv226FtbtuBv LpJmOuza8hW7Zyfa4lpeJFl5H24nZr/Fz4srReNQt9ahW5nGpn8d/azFaEhOyJ8hNi+HtnBn5yrv ClcsW+44slmL0UPyKj8Jh0/fmVjd12HxV+3hM+CZ6DZUFW4Q9+GOcPShuT6sw5o/3PovEKMhOaG5 frZBWPXdt2a2xkMV2JeNuNI62H1LqmJXF9J3O7XbQ65t4xP9+OguFMPdTr9Zkd9I313eLaxt28X5 VtUuqAPe5eVH/ckalPyl/THzFn/5jF0H9qEMZC/Fz4toTAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAEjpL514clJrNSt2AAAAAElFTkSuQmCC\";\n\n\nfunction formatUsersData (list, status) {\n  const idUsersOnline = status\n                            .filter( el => el.stream != null)\n                            .map( el =>   el.stream.channel._id );\n  \n  const usersOffline  = list\n                            .filter( el => !idUsersOnline.includes( el._id ) )\n                            .map( ele => Object.assign( {},\n                                    ({\n                                        name: ele.display_name,\n                                        logo: ele.logo || PLACEHOLDER,\n                                        id: ele._id,\n                                        status: 'offline',\n                                        game: ''\n                             })));\n\n\n  const usersOnline = status\n                           .filter( el => el.stream != null )\n                           .map( ele =>\n                                Object.assign( {},\n                                  ({\n                                  name: ele.stream.channel.display_name,\n                                  logo: ele.stream.channel.logo || PLACEHOLDER,\n                                  id: ele.stream.channel._id,\n                                  status: 'online',\n                                   game: ele.stream.game\n                             })));\n\n return usersOnline.concat( usersOffline );\n}\n\n\nexports.formatUsersData = formatUsersData;\nexports.USER_URL_ARR= USER_URL_ARR;\nexports.STREAM_URL_ARR= STREAM_URL_ARR;\nexports.PLACEHOLDER = PLACEHOLDER; \n"],"sourceRoot":""}