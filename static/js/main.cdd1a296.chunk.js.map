{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["USERS","PATH_BASE","USER_URL_ARR","map","ele","STREAM_URL_ARR","Menu","isLoading","onClick","className","Table","children","Tr","selected","list","status","idUsersOnline","filter","el","stream","channel","_id","usersOffline","includes","Object","assign","name","display_name","logo","id","game","userInfo","concat","key","alt","src","App","useState","setLoading","setSelected","result","setResult","setStream","useEffect","fetchUsers","a","users","url","fetch","then","res","json","Promise","all","val","fetchStream","usersStream","event","target","textContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wQAQOA,G,YAAQ,CACb,UACA,aACA,YACA,eACA,WACA,WACA,aACA,iBAEKC,EAAa,wCAGbC,EAAeF,EAAMG,KAAI,SAAAC,GAAG,gBAAOH,GAAP,OAFf,WAEe,OAAgCG,MAC5DC,EAAiBL,EAAMG,KAAI,SAAAC,GAAG,gBAAOH,GAAP,OAFd,aAEc,OAAkCG,MAEhEE,EAAQ,SAARA,EAAS,GAAD,IAAIC,EAAJ,EAAIA,UAAWC,EAAf,EAAeA,QAAf,OAAgCD,EAC3C,6BACC,kBAACD,EAAD,MACA,yBAAKG,UAAU,WACb,gDAIJ,yBAAKA,UAAU,QACb,4BAAQD,QAAUA,GAAlB,OACA,4BAAQA,QAAUA,GAAlB,UACA,4BAAQA,QAAUA,GAAlB,aAIEE,EAAQ,SAAC,GAAD,IAAIH,EAAJ,EAAIA,UAAWI,EAAf,EAAeA,SAAf,OACVJ,EAID,KAHA,2BAAOE,UAAU,SACdE,IAIL,SAASC,EAAT,GAAmD,EAAnCJ,QAAoC,IAA3BK,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OAEjCC,EAAgBD,EACKE,QAAQ,SAAAC,GAAE,OAAiB,MAAbA,EAAGC,UACjBhB,KAAK,SAAAe,GAAE,OAAMA,EAAGC,OAAOC,QAAQC,OAEpDC,EAAgBR,EACKG,QAAQ,SAAAC,GAAE,OAAKF,EAAcO,SAAUL,EAAGG,QAC1ClB,KAAK,SAAAC,GAAG,OAAIoB,OAAOC,OAAQ,GACnB,CACGC,KAAMtB,EAAIuB,aACVC,KAAMxB,EAAIwB,MAnDhC,wBAoDsBC,GAAIzB,EAAIiB,IACRN,OAAQ,UACRe,KAAM,QAkBzCC,EAdiBhB,EACME,QAAQ,SAAAC,GAAE,OAAiB,MAAbA,EAAGC,UACjBhB,KAAK,SAAAC,GAAG,OACJoB,OAAOC,OAAQ,GACZ,CACDC,KAAMtB,EAAIe,OAAOC,QAAQO,aACzBC,KAAMxB,EAAIe,OAAOC,QAAQQ,MAhEzC,wBAiEgBC,GAAIzB,EAAIe,OAAOC,QAAQC,IACvBN,OAAQ,SACPe,KAAM1B,EAAIe,OAAOW,UAGRE,OAAQV,GAEfnB,KAAM,SAAAe,GAAE,OACzC,wBACEe,IAAOf,EAAGW,GACVpB,UAAS,gCACqBS,EAAGH,OADxB,YAGQ,QAAbF,GACa,WAAbA,GAAwC,WAAfK,EAAGH,QACf,YAAbF,GAAyC,YAAfK,EAAGH,OAE3B,GACA,WAIN,wBACEkB,IAAG,UACKf,EAAGQ,KADR,SAEHjB,UAAU,aACV,yBACEwB,IAAG,UAAOf,EAAGQ,KAAV,QACHQ,IAAI,GACJC,IAAMjB,EAAGU,KACTnB,UAAU,oBAGd,wBACEwB,IAAMf,EAAGQ,KACTjB,UAAU,aAERS,EAAGQ,MAEP,wBACEO,IAAG,UAAOf,EAAGQ,KAAV,WACHjB,UAAU,aAERS,EAAGH,QAEP,wBACEkB,IAAMf,EAAGY,KACTrB,UAAU,aAERS,EAAGY,UAIT,OAAO,+BACL,wBAAIrB,UAAU,aACZ,oCACA,oCACA,sCACA,qCAECsB,GA4DIK,MArDf,WAAgB,IAAD,EACoBC,oBAAS,GAD7B,mBACN9B,EADM,KACK+B,EADL,OAEoBD,mBAAS,OAF7B,mBAENxB,EAFM,KAEK0B,EAFL,OAGoBF,mBAAS,IAH7B,mBAGNG,EAHM,KAGKC,EAHL,OAIoBJ,mBAAS,IAJ7B,mBAINlB,EAJM,KAIKuB,EAJL,KAqCZ,OA9BDC,qBAAW,WAMX,IAAMC,EAAU,uCAAG,4BAAAC,EAAA,sDACZC,EAAQ5C,EAAaC,KACzB,SAAA4C,GAAG,OAAIC,MAAOD,GACbE,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAE,GAAI,OAAIA,QAEfC,QAAQC,IAAIP,GAAOG,MAAK,SAAAK,GAAG,OAAIb,EAAUa,MANzB,2CAAH,qDAUVC,EAAW,uCAAG,4BAAAV,EAAA,sDACbW,EAAenD,EAAeF,KAC9B,SAAA4C,GAAG,OAAIC,MAAOD,GACbE,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAE,GAAI,OAAIA,QAEfC,QAAQC,IAAIG,GAAaP,MAAK,SAAAK,GAAG,OAAIZ,EAAUY,MANlC,2CAAH,qDASbV,IACAW,IACAjB,GAAW,KACb,IAGD,yBAAK7B,UAAU,WACb,kBAAC,EAAD,CACGD,QAAS,SAACiD,GAAD,OAAWlB,EAAYkB,EAAMC,OAAOC,cAC7CpD,UAAYA,IACf,kBAAC,EAAD,CAAOA,UAAYA,GACjB,kBAACK,EAAD,CACEC,SAAUA,EACVC,KAAM0B,EACNzB,OAAQI,OC5KGyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cdd1a296.chunk.js","sourcesContent":["import  React  from 'react';\nimport  { useState, useEffect }  from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nconst placeholder = \"./img/placeholder.png\";\n\n const USERS = [\n  \"ESL_SC2\",\n  \"OgamingSC2\",\n  \"cretetion\",\n  \"freecodecamp\",\n  \"storbeck\",\n  \"habathcx\",\n  \"RobotCaleb\",\n  \"noobs2ninjas\"];\n\n const PATH_BASE  = 'https://wind-bow.glitch.me/twitch-api';\n const PARAM_USER = '/users/';\n const PARAM_STREAM =  '/streams/';\n const USER_URL_ARR = USERS.map(ele => `${PATH_BASE}${PARAM_USER}${ele}`);\n const STREAM_URL_ARR = USERS.map(ele => `${PATH_BASE}${PARAM_STREAM}${ele}`);\n\n const Menu =  ( { isLoading, onClick } ) => ( isLoading )\n  ? <div>\n     <Menu />\n     <div className=\"message\">\n       <h1>Loading&nbsp;...</h1>\n     </div>\n    </div>\n\n : <div className=\"menu\" >\n     <button onClick={ onClick } >All</button>\n     <button onClick={ onClick } >Online</button>\n     <button onClick={ onClick } >Offline</button>\n   </div>;\n\n\n const Table = ( { isLoading, children } ) =>\n  ( !isLoading )\n  ? <table className=\"table\">\n     { children }\n    </table>\n  : null;\n\n  function Tr ( { onClick, selected, list, status} ) {\n\n    const idUsersOnline = status\n                              .filter( el => el.stream != null)\n                              .map( el =>   el.stream.channel._id );\n    \n    const usersOffline  = list\n                              .filter( el => !idUsersOnline.includes( el._id ) )\n                              .map( ele => Object.assign( {},\n                                      ({\n                                          name: ele.display_name,\n                                          logo: ele.logo || placeholder,\n                                          id: ele._id,\n                                          status: 'offline',\n                                          game: ''\n                               })));\n\n\n    const usersOnline = status\n                             .filter( el => el.stream != null )\n                             .map( ele =>\n                                  Object.assign( {},\n                                    ({\n                                    name: ele.stream.channel.display_name,\n                                    logo: ele.stream.channel.logo || placeholder,\n                                    id: ele.stream.channel._id,\n                                    status: 'online',\n                                     game: ele.stream.game\n                               })));\n   \n   const userDataAndStatusArr =   usersOnline.concat( usersOffline );\n\n   var userInfo = userDataAndStatusArr.map(  el  =>\n      <tr\n        key={  el.id }\n        className={\n            `table__tr  table__tr--${ el.status } ${\n            (\n            selected === 'All' ||\n            selected === 'Online' && el.status  === 'online' ||\n            selected === 'Offline' && el.status  === 'offline'\n            )\n            ? ''\n            : 'hidden'\n            }`\n            }\n      >\n        <td\n          key={\n              `${ el.name }-logo`}\n          className=\"table__td\" >\n          <img\n            key={ `${ el.name }-img` }\n            alt=\"\"\n            src={ el.logo }\n            className=\"table__td__img\"\n          />\n        </td>\n        <td\n          key={ el.name }\n          className=\"table__td\"\n        >\n          { el.name }\n        </td>\n        <td\n          key={ `${ el.name }-status` }\n          className=\"table__td\"\n        >\n          { el.status }\n        </td>\n        <td\n          key={ el.game }\n          className=\"table__td\"\n        >\n          { el.game }\n        </td>\n     </tr>);\n\n      return <tbody>\n        <tr className=\"table__th\">\n          <th>logo</th>\n          <th>name</th>\n          <th>status</th>\n          <th>game</th>\n        </tr>\n        {  userInfo }\n      </tbody>;\n   };\n\n\n\n\nfunction App() {\n  const [isLoading, setLoading]  = useState(true);\n  const [selected,  setSelected] = useState(\"All\");\n  const [result,    setResult]   = useState([]);\n  const [stream,    setStream]   = useState([]);\n\n\n  useEffect( () => {\n  /*\n  Not sure about this one, maybe is better to use only Promise.all\n  (without the  fetch* async functions)\n  */\n\n  const fetchUsers = async ()  => {\n     let users = USER_URL_ARR.map(\n     url => fetch( url )\n     .then( res => res.json() )\n     .then( json => json ));\n\n     Promise.all(users).then(val => setResult(val));\n\n  };\n\n  const fetchStream = async() => {\n     let usersStream =  STREAM_URL_ARR.map(\n         url => fetch( url )\n         .then( res => res.json())\n         .then( json => json));\n\n         Promise.all(usersStream).then(val => setStream(val));\n      };\n\n      fetchUsers();\n      fetchStream();\n      setLoading(false);\n  },[]);\n\n   return (\n   <div className=\"content\" >\n     <Menu\n        onClick={(event) => setSelected(event.target.textContent) }\n        isLoading={ isLoading  } />\n     <Table isLoading={ isLoading } >\n       <Tr\n         selected={selected}\n         list={result}\n         status={stream}\n       />\n     </Table>\n   </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}