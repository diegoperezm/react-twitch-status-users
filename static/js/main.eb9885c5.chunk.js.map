{"version":3,"sources":["utils/index.js","components/Menu/index.js","components/UsersTable/OnlineUsers.js","components/UsersTable/OfflineUsers.js","components/UsersTable/index.js","App.js","serviceWorker.js","index.js"],"names":["USERS","PATH_BASE","USER_URL_ARR","map","ele","STREAM_URL_ARR","exports","formatUsersData","list","status","idUsersOnline","filter","el","stream","channel","_id","usersOffline","includes","Object","assign","name","display_name","logo","id","game","concat","Menu","isLoading","className","Nav","variant","defaultActiveKey","Item","to","Link","OnlineUsers","userInfo","elem","key","alt","src","OfflineUsers","AllUsersTable","Table","hover","responsive","OnlineUsersTable","OfflineUsersTable","App","useState","setLoading","result","setResult","setStream","useEffect","fetchUsers","a","users","url","fetch","then","res","json","Promise","all","val","fetchStream","usersStream","Container","Row","Col","xs","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb9885c5.chunk.js","sourcesContent":[" const USERS = [\n  \"ESL_SC2\",\n  \"OgamingSC2\",\n  \"cretetion\",\n  \"freecodecamp\",\n  \"storbeck\",\n  \"habathcx\",\n  \"RobotCaleb\",\n  \"noobs2ninjas\"];\n\n const PATH_BASE  = 'https://wind-bow.glitch.me/twitch-api';\n const PARAM_USER = '/users/';\n const PARAM_STREAM =  '/streams/';\n\n const USER_URL_ARR = USERS.map(ele => `${PATH_BASE}${PARAM_USER}${ele}`);\n const STREAM_URL_ARR = USERS.map(ele => `${PATH_BASE}${PARAM_STREAM}${ele}`);\n\n\n\nconst placeholder = \"./img/placeholder.png\";\n\nfunction formatUsersData (list, status) {\n  const idUsersOnline = status\n                            .filter( el => el.stream != null)\n                            .map( el =>   el.stream.channel._id );\n  \n  const usersOffline  = list\n                            .filter( el => !idUsersOnline.includes( el._id ) )\n                            .map( ele => Object.assign( {},\n                                    ({\n                                        name: ele.display_name,\n                                        logo: ele.logo || placeholder,\n                                        id: ele._id,\n                                        status: 'offline',\n                                        game: ''\n                             })));\n\n\n  const usersOnline = status\n                           .filter( el => el.stream != null )\n                           .map( ele =>\n                                Object.assign( {},\n                                  ({\n                                  name: ele.stream.channel.display_name,\n                                  logo: ele.stream.channel.logo || placeholder,\n                                  id: ele.stream.channel._id,\n                                  status: 'online',\n                                   game: ele.stream.game\n                             })));\n\n return usersOnline.concat( usersOffline );\n}\n\n\nexports.formatUsersData = formatUsersData;\nexports.USER_URL_ARR= USER_URL_ARR;\nexports.STREAM_URL_ARR= STREAM_URL_ARR;\n","import  React          from 'react';\nimport  Nav            from 'react-bootstrap/Nav';\nimport {LinkContainer} from 'react-router-bootstrap';\n\n\nconst Menu =  ( { isLoading } ) => ( isLoading )\n  ? <div>\n     <div className=\"message\">\n       <h1>Loading&nbsp;...</h1>\n     </div>\n    </div>\n\n  : <Nav\n      variant=\"pills\"\n      defaultActiveKey=\"/all\"\n      className=\"mt-2 mb-2\"\n    >\n    <Nav.Item>\n    <LinkContainer to=\"/react-twitch-status-users/all\">\n       <Nav.Link>All</Nav.Link>\n     </LinkContainer>\n    </Nav.Item>\n    <Nav.Item>\n    <LinkContainer to=\"/react-twitch-status-users/online\">\n      <Nav.Link>Online</Nav.Link>\n     </LinkContainer>\n    </Nav.Item>\n    <Nav.Item>\n     <LinkContainer to=\"/react-twitch-status-users/offline\">\n       <Nav.Link>Offline</Nav.Link>\n     </LinkContainer>\n    </Nav.Item>\n   </Nav>;\n\n\nexport default Menu;\n","import React from 'react';\nimport { formatUsersData } from '../../utils';\n\nfunction OnlineUsers ( { list, status} ) {\n const userDataAndStatusArr =  formatUsersData(list, status);\n let userInfo = userDataAndStatusArr.filter(elem => elem.status === 'online').map( el =>\n    <tr\n      key={  el.id }\n      className={`table__tr  table__tr--${ el.status }`}\n    >\n      <td\n        key={\n            `${ el.name }-logo`}\n        className=\"table__td\" >\n        <img\n          key={ `${ el.name }-img` }\n          alt=\"\"\n          src={ el.logo }\n          className=\"table__td__img\"\n        />\n      </td>\n      <td\n        key={ el.name }\n        className=\"table__td\"\n      >\n        { el.name }\n      </td>\n      <td\n        key={ `${ el.name }-status` }\n        className=\"table__td\"\n      >\n        { el.status }\n      </td>\n      <td\n        key={ el.game }\n        className=\"table__td\"\n      >\n        { el.game }\n      </td>\n   </tr>);\n\n    return (<>{userInfo}</> );\n\n };\n\n\nexport default OnlineUsers;\n","import React from 'react';\nimport { formatUsersData } from '../../utils';\n\nfunction OfflineUsers ( {  list, status} ) {\n const userDataAndStatusArr =  formatUsersData(list, status);\n let userInfo = userDataAndStatusArr.filter(elem => elem.status === 'offline').map( el =>\n    <tr\n      key={  el.id }\n      className={`table__tr  table__tr--${ el.status }`}\n    >\n      <td\n        key={\n            `${ el.name }-logo`}\n        className=\"table__td\" >\n        <img\n          key={ `${ el.name }-img` }\n          alt=\"\"\n          src={ el.logo }\n          className=\"table__td__img\"\n        />\n      </td>\n      <td\n        key={ el.name }\n        className=\"table__td\"\n      >\n        { el.name }\n      </td>\n      <td\n        key={ `${ el.name }-status` }\n        className=\"table__td\"\n      >\n        { el.status }\n      </td>\n      <td\n        key={ el.game }\n        className=\"table__td\"\n      >\n        { el.game }\n      </td>\n   </tr>);\n\n    return(<>{userInfo }</>);\n };\n\n\nexport default OfflineUsers;\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport OnlineUsers from './OnlineUsers';\nimport OfflineUsers from './OfflineUsers';\n\nconst AllUsersTable = ( { isLoading, list, status  } ) =>\n  ( !isLoading )\n  ? <Table hover responsive>\n     <tbody>\n      <tr className=\"table__th\">\n        <th>Logo</th>\n        <th>Name</th>\n        <th>Status</th>\n        <th>Game</th>\n      </tr>\n      <OnlineUsers\n         list={list}\n         status={status}\n      /> \n      <OfflineUsers\n        list={list}\n       status={status}\n      />\n     </tbody>\n    </Table>\n  : null;\n\nconst OnlineUsersTable = ( { isLoading, list, status  } ) =>\n  ( !isLoading )\n  ? <Table hover responsive>\n     <tbody>\n      <tr className=\"table__th\">\n        <th>Logo</th>\n        <th>Name</th>\n        <th>Status</th>\n        <th>Game</th>\n      </tr>\n      <OnlineUsers\n         list={list}\n         status={status}\n      /> \n    </tbody>\n    </Table>\n  : null;\n\nconst OfflineUsersTable = ( { isLoading, list, status  } ) =>\n  ( !isLoading )\n  ? <Table hover responsive>\n     <tbody>\n      <tr className=\"table__th\">\n        <th>Logo</th>\n        <th>Name</th>\n        <th>Status</th>\n        <th>Game</th>\n      </tr>\n     <OfflineUsers\n        list={list}\n        status={status}\n      />\n     </tbody>\n    </Table>\n  : null;\n\nexport { AllUsersTable, OnlineUsersTable, OfflineUsersTable };\n\n\n","import React                                     from 'react';\nimport { useState, useEffect }                   from 'react';\nimport {BrowserRouter as Router, Switch, Route,} from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport Menu from './components/Menu';\nimport  {\n AllUsersTable,\n OnlineUsersTable,\n OfflineUsersTable\n}  from './components/UsersTable/';\n\nimport { USER_URL_ARR, STREAM_URL_ARR }  from './utils/';\n\nfunction App() {\n  const [isLoading, setLoading]  = useState(true);\n  const [result,    setResult]   = useState([]);\n  const [stream,    setStream]   = useState([]);\n\n\n  useEffect( () => {\n  /*\n  Not sure about this one, maybe is better to use only Promise.all\n  (without the  fetch* async functions)\n  */\n\n  const fetchUsers = async ()  => {\n     let users = USER_URL_ARR.map(\n     url => fetch( url )\n     .then( res => res.json() )\n     .then( json => json ));\n\n     Promise.all(users).then(val => setResult(val));\n\n  };\n\n  const fetchStream = async() => {\n     let usersStream =  STREAM_URL_ARR.map(\n         url => fetch( url )\n         .then( res => res.json())\n         .then( json => json));\n\n         Promise.all(usersStream).then(val => setStream(val));\n      };\n\n      fetchUsers();\n      fetchStream();\n      setLoading(false);\n  },[]);\n\n return (\n    <Router>\n     <Container  >\n       <Row>\n         <Col xs={12}>\n          <Menu isLoading={ isLoading  } />\n         <Switch>\n            <Route exact path=\"/react-twitch-status-users/\">\n              <AllUsersTable \n               isLoading={ isLoading }\n               list={result}\n               status={stream} />\n             </Route>\n            <Route exact path=\"/react-twitch-status-users/online\">\n              <OnlineUsersTable \n               isLoading={ isLoading }\n               list={result}\n               status={stream} />\n             </Route>\n             <Route exact path=\"/react-twitch-status-users/offline\">\n              <OfflineUsersTable \n               isLoading={ isLoading }\n               list={result}\n               status={stream} />\n             </Route>\n            <Route exact path=\"/react-twitch-status-users/all\">\n              <AllUsersTable \n               isLoading={ isLoading }\n               list={result}\n               status={stream} />\n             </Route>\n            </Switch>\n            </Col>\n       </Row>\n     </Container>\n    </Router>\n );\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}